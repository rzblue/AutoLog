package autolog.generate.output;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Pose3d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Rotation3d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.geometry.Translation3d;
import edu.wpi.first.networktables.NTSendable;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.util.datalog.*;
import edu.wpi.first.networktables.*;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.util.sendable.SendableBuilder;
import edu.wpi.first.wpilibj.DataLogManager;
import autolog.DataLogSendableBuilder;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilderImpl;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.util.function.*;

import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.function.Supplier;
import edu.wpi.first.wpilibj.Timer;
public class DataLogger extends GenericLogger {
    private DataLogger(){super();};
    private static DataLog log;

    {%for t in types%}
    public static void put(String entryName, {{t.java.ValueType}} value) {
        new {{t.TypeName}}LogEntry(log, entryName).append(value);
    }

    public static void add{{t.TypeName}}(String entryName, Supplier<{{t.java.Supplier}}> valueSupplier) {
        var entry = new {{t.TypeName}}LogEntry(log, entryName);
        map.put(entryName, field((timestamp)->entry.append(valueSupplier.get(), timestamp), ()->{}));
    }
    {%endfor%}


    public static void helper(Supplier<?> supplier, DataType type, String path, boolean oneShot) {
        switch (type) {
            {%for t in types%}
            case {{t.TypeName}}:
                if (oneShot) {
                    DataLogger.put(path, ({{t.java.ValueType}}) supplier.get());
                } else {
                    DataLogger.add{{t.TypeName}}(path, () -> ({{t.java.ValueType}}) supplier.get());
                }
                break;
            {%endfor%}
            case Sendable:
                DataLogger.addSendable(path, (Sendable) supplier.get());
                break;
            default:
                throw new IllegalArgumentException("Invalid data type");
        }
    }

    public static void addNetworkTable(NetworkTable table) {
        NetworkTableInstance.getDefault()
            .startEntryDataLog(log, table.getPath(), table.getPath());
    }

    public static void addNetworkTable(NetworkTable table, String dlPath) {
        NetworkTableInstance.getDefault()
            .startEntryDataLog(log, table.getPath(), dlPath);
    }

    public static void addSendable(String path, Sendable sendable) {        
        var builder = new DataLogSendableBuilder(path);
        sendable.initSendable(builder);
        sendables.add(builder);
    }

    public static void startLog() {
        log = DataLogManager.getLog();
    }
}