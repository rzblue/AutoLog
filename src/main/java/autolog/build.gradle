
buildscript {
    repositories {
        maven {
            url = 'https://frcmaven.wpi.edu/artifactory/ex-mvn'
        }
    }
    dependencies {
        classpath 'com.hubspot.jinjava:jinjava:2.7.1'
    }
}
plugins {
    id "java"
}
import groovy.json.JsonSlurper;
import com.hubspot.jinjava.Jinjava;
import com.hubspot.jinjava.JinjavaConfig;


def ntcoreTypesInputFile = file("generate/types.json")
def ntcoreJavaTypesInputDir = file("generate/java")
def ntcoreJavaTypesOutputDir = file("generate/output")
task ntcoreGenerateJavaTypes() {
    description = "Generates ntcore Java type classes"
    group = "WPILib"

    inputs.file ntcoreTypesInputFile
    inputs.dir ntcoreJavaTypesInputDir
    outputs.dir ntcoreJavaTypesOutputDir

    doLast {
        def jsonSlurper = new JsonSlurper()
        def jsonTypes = jsonSlurper.parse(ntcoreTypesInputFile)

        ntcoreJavaTypesOutputDir.deleteDir()
        ntcoreJavaTypesOutputDir.mkdirs()

        def config = new JinjavaConfig()
        def jinjava = new Jinjava(config)

        ntcoreJavaTypesInputDir.listFiles().each { File file ->
            def template = file.text
            def outfn = file.name.substring(0, file.name.length() - 6)
            if (file.name.startsWith("NTLogger")
                || file.name.startsWith("DataLogger")
                || file.name.startsWith("GenericLogger")
                || file.name.startsWith("DataType")) {
                def replacements = new HashMap<String,?>()
                replacements.put("types", jsonTypes)
                def output = jinjava.render(template, replacements)
                new File(ntcoreJavaTypesOutputDir, outfn).write(output)
            }
        }
    }
}

